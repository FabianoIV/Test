@using Grafik.Data
@using Grafik.Services

@inject DialogService DialogService
@inject ApplicationDbContext DbContext
@inject NotificationService NotificationService
@inject ICustomAuthService authService
@inject ICustomNotificationsService CustomNotificationsService

@code {
    [Parameter]
    public required ExcludedTime ExcludedTime { get; set; }

    async Task OnSubmit(ExcludedTime model)
    {
        if (!await authService.IsUserAuthenticated())
        {
            CustomNotificationsService.SendAuthorizationMissingNotification();
            DialogService.Close(null);
            return;
        }

        try
        {
            DbContext.ExcludedTime.Remove(model);
            DbContext.SaveChanges();

            CustomNotificationsService.SendExcludedTimeDeleteSuccessNotification();
        }
        catch (Exception)
        {
            CustomNotificationsService.SendExcludedTimeDeleteErrorNotification();
        }

        DialogService.Close(model);
    }

    void OnCancel()
    {
        DialogService.Close(null);
    }
}

<RadzenTemplateForm TItem="ExcludedTime" Data="@ExcludedTime" Submit=@OnSubmit>
    <RadzenStack Gap="1rem">
        Czy na pewno chcesz usunąć wykluczone godziny? <br />
        @ExcludedTime.From - @ExcludedTime.To <br />
        @ExcludedTime.Reason <br />

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Danger" Text="Usuń" />
            <RadzenButton ButtonType="ButtonType.Button" Text="Anuluj" Click="OnCancel" />
        </RadzenStack>
    </RadzenStack>
</RadzenTemplateForm>