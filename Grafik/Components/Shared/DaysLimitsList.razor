@using Grafik.Data
@using Microsoft.EntityFrameworkCore

@inject ApplicationDbContext DbContext

@code {
    [Parameter]
    public Guid PlanningSessionId { get; set; }

    private RadzenDataGrid<UserHourLimit> userHourLimitsDataGrid;
    private IQueryable<UserHourLimit> userHourLimits;
    private IList<UserHourLimit> selectedUserHourLimits;

    protected override async Task OnInitializedAsync()
    {
        userHourLimits = DbContext.UserHourLimit.Include(uhl => uhl.PlannerUser)
                                                .Where(uhl => uhl.PlanningSessionId == this.PlanningSessionId && uhl.PlannerUser != null)
                                                .AsQueryable();

        await EnsureAllUsersHaveHoursLimitData();

        await base.OnInitializedAsync();
    }

    public async Task EnsureAllUsersHaveHoursLimitData()
    {
        var allUsers = await DbContext.PlannerUsers.ToListAsync();
        var userHoursLimits = await userHourLimits.ToListAsync();

        foreach (var user in allUsers)
        {
            if (!userHoursLimits.Any(uhl => uhl.PlannerUserId == user.Id))
            {
                var newUserHoursLimit = new UserHourLimit
                    {
                        PlanningSessionId = this.PlanningSessionId,
                        PlannerUserId = user.Id,
                        UnavailabilityFreeHoursLimit = 0,
                        UnavailabilityPaidHoursLimit = 0
                    };
                DbContext.UserHourLimit.Add(newUserHoursLimit);
            }
        }

        await DbContext.SaveChangesAsync();
    }

    private void OpenAddExcludedTimeDialog()
    {

    }
}

<RadzenButton Click=@(args => OpenAddExcludedTimeDialog())
              Text="Dodaj Regułę"
              Icon="add_circle"
              Style="margin-bottom: 15px"
              ButtonStyle="ButtonStyle.Primary" />

<RadzenDataGrid AllowFiltering="false"
                AllowColumnResize="false"
                AllowAlternatingRows="false"
                FilterMode="FilterMode.Advanced"
                AllowSorting="true"
                PageSize="25"
                AllowPaging="true"
                PagerHorizontalAlign="HorizontalAlign.Justify"
                ShowPagingSummary="true"
                Data="@userHourLimits"
                ColumnWidth="300px"
                LogicalFilterOperator="LogicalFilterOperator.Or"
                SelectionMode="DataGridSelectionMode.Single"
                @bind-Value=@selectedUserHourLimits
                @ref=@userHourLimitsDataGrid>
    <Columns>
        <RadzenDataGridColumn Property="@nameof(UserHourLimit.PlannerUser.Name)"
                              FormatString="{0:d}"
                              Filterable="true"
                              Title="Od"
                              Frozen="true"
                              Width="80px"
                              TextAlign="TextAlign.Left" />
        <RadzenDataGridColumn Property="@nameof(UserHourLimit.UnavailabilityPaidHoursLimit)"
                              FormatString="{0:d}"
                              Filterable="true"
                              Title="Do"
                              Frozen="true"
                              Width="80px"
                              TextAlign="TextAlign.Left" />
        <RadzenDataGridColumn Property="@nameof(UserHourLimit.UnavailabilityFreeHoursLimit)"
                              Filterable="true"
                              Title="Powód"
                              Frozen="true"
                              Width="80px"
                              TextAlign="TextAlign.Left" />
        <RadzenDataGridColumn Context="userHourLimit"
                              Filterable="false"
                              Sortable="false"
                              TextAlign="TextAlign.Right"
                              Width="52px">
            <Template Context="userHourLimit">
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
                    @* <RadzenButton Icon="edit" *@
                    @*               ButtonStyle="ButtonStyle.Light" *@
                    @*               Variant="Variant.Flat" *@
                    @*               Size="ButtonSize.Medium" *@
                    @*               Click="@(args => OpenEditExcludedTimeDialog(userHourLimit))" *@
                    @*               @onclick:stopPropagation="true"> *@
                    @* </RadzenButton> *@
                    @* <RadzenButton Icon="delete" *@
                    @*               ButtonStyle="ButtonStyle.Light" *@
                    @*               Variant="Variant.Flat" *@
                    @*               Size="ButtonSize.Medium" *@
                    @*               Click="@(args => OpenDeleteExcludedTimeDialog(userHourLimit))" *@
                    @*               @onclick:stopPropagation="true"> *@
                    @* </RadzenButton> *@
                </RadzenStack>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>