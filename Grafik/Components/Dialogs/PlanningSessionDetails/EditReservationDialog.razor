@using Grafik.Data
@using System.Security.Claims
@using Grafik.Services

@inject DialogService DialogService
@inject ApplicationDbContext DbContext
@inject NotificationService NotificationService
@inject ICustomAuthService authService
@inject ICustomNotificationsService CustomNotificationsService

@code {
    [Parameter]
    public Reservation? Reservation { get; set; }

    [Parameter]
    public UserHourLimit? UserHourLimit { get; set; }

    private IEnumerable<ReservationType> reservationTypes;
    private IEnumerable<PlannerUser> plannerUsers;

    private int shiftOption = 1;

    protected override void OnInitialized()
    {
        reservationTypes = new List<ReservationType>() {
            ReservationType.SchooolReunion,
            ReservationType.UnavailabilityFree,
            ReservationType.UnavailabilityPaid
        };

        plannerUsers = DbContext.PlannerUsers.ToList();

        if (Reservation.Type == ReservationType.UnavailabilityFree)
        {
            if (Reservation.From.Hour == 7)
            {
                shiftOption = 1;
            }
            else
            {
                shiftOption = 2;
            }
        }

        base.OnInitialized();
    }

    async Task OnSubmit(Reservation model)
    {
        if (!await authService.IsUserAuthenticated())
        {
            CustomNotificationsService.SendAuthorizationMissingNotification();
            DialogService.Close(null);
            return;
        }

        if (!await authService.IsAdministrator())
        {
            if (model.PlannerUser.Email != (await authService.GetLoggedUserName()))
            {
                CustomNotificationsService.SendNotReservationOwnerNotification();
                return;
            }
        }

        try
        {
            DbContext.Reservations.Update(model);
            DbContext.SaveChanges();

            CustomNotificationsService.SendEditReservationSuccessNotification();
        }
        catch (Exception)
        {
            CustomNotificationsService.SendEditReservationErrorNotification();
        }

        DialogService.Close(model);
    }

    private bool ValidateFromAndToDateIsOnlyInWeekend()
    {
        if ((Reservation.To - Reservation.From).Days > 3)
        {
            return false;
        }

        if (!(Reservation.From.DayOfWeek == DayOfWeek.Friday ||
            Reservation.From.DayOfWeek == DayOfWeek.Saturday ||
            Reservation.From.DayOfWeek == DayOfWeek.Sunday))
        {
            return false;
        }

        if (!(Reservation.To.DayOfWeek == DayOfWeek.Friday ||
            Reservation.To.DayOfWeek == DayOfWeek.Saturday ||
            Reservation.To.DayOfWeek == DayOfWeek.Sunday))
        {
            return false;
        }

        return true;
    }

    void OnCancel()
    {
        DialogService.Close(null);
    }

    public async Task OnRemoveReservation()
    {
        if (!await authService.IsUserAuthenticated())
        {
            CustomNotificationsService.SendAuthorizationMissingNotification();
            DialogService.Close(null);
            return;
        }

        if (!await authService.IsAdministrator())
        {
            if (Reservation.PlannerUser != null && Reservation.PlannerUser.Email != (await authService.GetLoggedUserName()))
            {
                CustomNotificationsService.SendNotReservationOwnerNotification();
                return;
            }
        }

        try
        {
            DbContext.Reservations.Remove(Reservation);
            DbContext.SaveChanges();

            CustomNotificationsService.SendReservationDeleteSuccessNotification();
        }
        catch (Exception)
        {
            CustomNotificationsService.SendReservationDeleteErrorNotification();
        }

        DialogService.Close(null);
    }
}

<RadzenTemplateForm TItem="Reservation" Data="@Reservation" Submit=@OnSubmit>
    <RadzenStack Gap="1rem">

        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenLabel Text="Typ rezerwacji"
                         Style="width: 6rem;" />
            <RadzenDropDown @bind-Value=@Reservation.Type
                            Data=@reservationTypes
                            Style="width: 15rem;"
                            Name="DropDownBindValue" />
        </RadzenStack>

        @if (Reservation.Type == ReservationType.UnavailabilityFree)
        {
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
                <RadzenLabel Text="Data"
                Style="width: 6rem;" />
                <RadzenDatePicker @bind-Value="@Reservation.From"
                Name="From"
                ShowTime="true"
                DateFormat="yyyy/MM/dd"
                Style="width: 15rem;" />
                <RadzenRequiredValidator Component="From"
                Text="Data od jest wymagana" />
            </RadzenStack>


            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
                <RadzenLabel Text="Zmiana: "
                Style="width: 6rem;" />

                <RadzenRadioButtonList @bind-Value=@shiftOption TValue="int" Orientation="Orientation.Vertical" Style="width: 15rem;">
                    <Items>
                        <RadzenRadioButtonListItem Text="dzienna" Value="1" />
                        <RadzenRadioButtonListItem Text="nocna" Value="2" />
                    </Items>
                </RadzenRadioButtonList>
            </RadzenStack>
        }
        else if (Reservation.Type == ReservationType.UnavailabilityPaid)
        {
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
                <RadzenLabel Text="Data"
                Style="width: 6rem;" />
                <RadzenDatePicker @bind-Value="@Reservation.From"
                Name="From"
                ShowTime="true"
                DateFormat="yyyy/MM/dd"
                Style="width: 15rem;" />
                <RadzenRequiredValidator Component="From"
                Text="Data od jest wymagana" />
            </RadzenStack>
        }
        else if (Reservation.Type == ReservationType.SchooolReunion)
        {
            @* <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap"> *@
            @*     <RadzenLabel Text="Od" *@
            @*     Style="width: 6rem;" /> *@
            @*     <RadzenDatePicker @bind-Value=@Reservation.From *@
            @*     Name="Od" *@
            @*     ShowCalendarWeek /> *@
            @*     <RadzenRequiredValidator Component="Od" Text="Data od jest wymagana" /> *@
            @* </RadzenStack> *@

            @* <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap"> *@
            @*     <RadzenLabel Text="Do" *@
            @*     Style="width: 6rem;" /> *@
            @*     <RadzenDatePicker @bind-Value=@Reservation.To *@
            @*     Name="Do" *@
            @*     ShowCalendarWeek /> *@
            @*     <RadzenRequiredValidator Component="Do" Text="Data do jest wymagana" /> *@
            @*     <RadzenCustomValidator Component="Do" *@
            @*     Validator="@ValidateFromAndToDateIsOnlyInWeekend" *@
            @*     Text="Zjazd może odbywać się tylko w weekend (piątek, sobota, niedziela)" /> *@
            @* </RadzenStack> *@

            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
                <RadzenLabel Text="Data"
                             Style="width: 6rem;" />
                <RadzenDatePicker @bind-Value="@Reservation.From"
                                  Name="From"
                                  ShowTime="true"
                                  DateFormat="yyyy/MM/dd"
                                  Style="width: 15rem;" />
                <RadzenRequiredValidator Component="From"
                                         Text="Data od jest wymagana" />
            </RadzenStack>


            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
                <RadzenLabel Text="Zmiana: "
                             Style="width: 6rem;" />

                <RadzenRadioButtonList @bind-Value=@shiftOption TValue="int" Orientation="Orientation.Vertical" Style="width: 15rem;">
                    <Items>
                        <RadzenRadioButtonListItem Text="dzienna" Value="1" />
                        <RadzenRadioButtonListItem Text="nocna" Value="2" />
                    </Items>
                </RadzenRadioButtonList>
            </RadzenStack>
        }

        @if (authService.IsAdministrator().Result)
        {
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
                <RadzenLabel Text="Przypisana osoba"
                Style="width: 6rem;" />
                <RadzenDropDown @bind-Value=@Reservation.PlannerUser
                Data=@plannerUsers
                Style="width: 15rem;"
                Name="DropDownPlannerUser">
                    <Template Context="user">
                        <div style="display: inline-block; align-items: center;">
                            <span style="font-weight: 500; margin-left: 5px;">@user.Name</span>
                            <span>(@user.Email)</span>
                        </div>
                    </Template>
                </RadzenDropDown>
                <RadzenRequiredValidator Component="DropDownPlannerUser"
                Text="Przypisana osoba jest wymagana" />
            </RadzenStack>
        }
        else
        {
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
                    <RadzenLabel Text="Przypisana osoba"
                             Style="width: 6rem;" />
                if (Reservation.PlannerUser != null)
                {
                    <RadzenTextBox Name="PlannerUserDisabled"
                                   @bind-Value=@Reservation.PlannerUser!.Email
                                   Style="width: 15rem;"
                                   Disabled="true" />
                }
                else
                {
                    <div>Użytkownik nieznany</div>
                }
                </RadzenStack>  
        }

        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenLabel Text="Nazwa"
                         Style="width: 6rem;" />
            <RadzenTextBox Name="Name"
                           @bind-Value="@Reservation.Comment"
                           Style="width: 12rem;" />
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
            <RadzenButton ButtonType="ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Text="Usuń" Click="OnRemoveReservation" />
            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Text="Zapisz" />
            <RadzenButton ButtonType="ButtonType.Button" Text="Anuluj" Click="OnCancel" />
        </RadzenStack>
    </RadzenStack>
</RadzenTemplateForm>