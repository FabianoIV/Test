@page "/planning-sessions/{planningSessionId:guid}"

@using Grafik.Components.Dialogs
@using Grafik.Components.Shared
@using Grafik.Data
@using Grafik.Helpers
@using Grafik.Services
@using Microsoft.EntityFrameworkCore
@using Grafik.Components.Dialogs.PlanningSessionDetails
@using System.Globalization

@rendermode InteractiveServer

@inject DialogService DialogService
@inject ApplicationDbContext DbContext
@inject NotificationService NotificationService
@inject ICustomAuthService authService
@inject ICustomNotificationsService CustomNotificationsService

@code {
    [Parameter]
    public Guid PlanningSessionId { get; set; }

    public PlanningSession PlanningSession { get; set; }

    RadzenScheduler<Reservation>? scheduler;
    RadzenDataGrid<Reservation>? reservationDataGrid;
    RadzenDataGrid<ExcludedTime>? excludedTimeDataGrid;

    IQueryable<Reservation>? reservations;
    IList<Reservation>? selectedReservations;

    IQueryable<ExcludedTime>? excludedTimes;
    IList<ExcludedTime>? selectedExcludedTimes;

    List<ExcludedTime> excludedTimesCached = new List<ExcludedTime>();

    private int shiftTypeFilterOption = 1;

    protected override Task OnInitializedAsync()
    {
        CultureInfo.DefaultThreadCurrentCulture = new CultureInfo("pl-PL");
        CultureInfo.DefaultThreadCurrentUICulture = new CultureInfo("pl-PL");

        PlanningSession = DbContext.PlanningSessions.Single(x => x.Id == PlanningSessionId);
        reservations = DbContext.Reservations.Include(r => r.PlannerUser).Where(r => r.PlanningSessionId == PlanningSessionId).AsQueryable();
        excludedTimes = DbContext.ExcludedTime.Where(r => r.PlanningSessionId == PlanningSessionId).AsQueryable();

        excludedTimesCached = excludedTimes.ToList();

        return base.OnInitializedAsync();
    }

    private async Task OpenAddReservationDialog(DateTime? prefferedStartTime = null, DateTime? prefferedEndTime = null)
    {
        if (!await authService.IsUserAuthenticated())
        {
            CustomNotificationsService.SendAuthorizationMissingNotification();
            return;
        }

        if (!PlanningSession.IsActive)
        {
            CustomNotificationsService.SendSessionNotActiveNotification();
            return;
        }

        DialogService.OnClose += OnDialogClose;
        DialogService.Open<AddReservationDialog>(
            "Dodaj rezerwację",
            new Dictionary<string, object> {
                    { "PlanningSession", PlanningSession },
                    { "PrefferedStartTime", prefferedStartTime!},
                    { "PrefferedEndTime", prefferedEndTime!},
                });
    }

    private async Task OpenEditReservationDialog(Reservation reservation)
    {
        if (!await authService.IsUserAuthenticated())
        {
            CustomNotificationsService.SendAuthorizationMissingNotification();
            return;
        }

        if (!PlanningSession.IsActive)
        {
            CustomNotificationsService.SendSessionNotActiveNotification();
            return;
        }

        DialogService.OnClose += OnDialogClose;
        DialogService.Open<EditReservationDialog>(
            "Edytuj sesję planowania",
            new Dictionary<string, object>{
                { "Reservation", reservation }
                        });
    }

    private async Task OpenDeleteReservationDialog(Reservation reservation)
    {
        if (!await authService.IsUserAuthenticated())
        {
            CustomNotificationsService.SendAuthorizationMissingNotification();
            return;
        }

        if (!PlanningSession.IsActive)
        {
            CustomNotificationsService.SendSessionNotActiveNotification();
            return;
        }

        DialogService.OnClose += OnDialogClose;
        DialogService.Open<DeleteReservationDialog>(
            "Usuń rezerwację",
            new Dictionary<string, object>{
                { "Reservation", reservation }
                        });
    }

    private async Task OpenAddExcludedTimeDialog()
    {
        if (!await authService.IsUserAuthenticated())
        {
            CustomNotificationsService.SendAuthorizationMissingNotification();
            return;
        }

        if (!await authService.IsAdministrator())
        {
            CustomNotificationsService.SendAuthorizationMissingNotification();
            return;
        }

        if (!PlanningSession.IsActive)
        {
            CustomNotificationsService.SendSessionNotActiveNotification();
            return;
        }

        DialogService.OnClose += OnDialogClose;
        DialogService.Open<AddExcludedTimeDialog>(
            "Dodaj wykluczenie",
            new Dictionary<string, object> {
                    { "PlanningSession", PlanningSession }
            });
    }

    private async Task OpenEditExcludedTimeDialog(ExcludedTime excludedTime)
    {
        if (!await authService.IsUserAuthenticated())
        {
            CustomNotificationsService.SendAuthorizationMissingNotification();
            return;
        }

        if (!await authService.IsAdministrator())
        {
            CustomNotificationsService.SendAuthorizationMissingNotification();
            return;
        }

        if (!PlanningSession.IsActive)
        {
            CustomNotificationsService.SendSessionNotActiveNotification();
            return;
        }

        DialogService.OnClose += OnDialogClose;
        DialogService.Open<EditExcludedTimeDialog>(
            "Edytuj wykluczenie",
            new Dictionary<string, object>{
                { "ExcludedTime", excludedTime }
            });
    }

    private async Task OpenDeleteExcludedTimeDialog(ExcludedTime excludedTime)
    {
        if (!await authService.IsUserAuthenticated())
        {
            CustomNotificationsService.SendAuthorizationMissingNotification();
            return;
        }

        if (!await authService.IsAdministrator())
        {
            CustomNotificationsService.SendAuthorizationMissingNotification();
            return;
        }

        if (!PlanningSession.IsActive)
        {
            CustomNotificationsService.SendSessionNotActiveNotification();
            return;
        }

        DialogService.OnClose += OnDialogClose;
        DialogService.Open<DeleteExcludedTimeDialog>(
            "Usuń wykluczenie",
            new Dictionary<string, object>{
                { "ExcludedTime", excludedTime }
            });
    }

    private void OnDialogClose(dynamic args)
    {
        excludedTimesCached = excludedTimes!.ToList();

        scheduler!.Reload();
        reservationDataGrid!.Reload();
        excludedTimeDataGrid!.Reload();

        DialogService.OnClose -= (args) => { };
    }

    private void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        if (PlanningSession == null)
        {
            return;
        }

        if (args.Start < PlanningSession.From || args.Start > PlanningSession.To)
        {
            // Set background grey if slot is outside of PlanningSession range
            args.Attributes["class"] = "rz-slot-out-of-range";
        }
        else
        {
            // Applay only to cells with 1 day range
            if (!((args.End - args.Start).Days > 1))
            {
                foreach (var item in excludedTimesCached)
                {
                    // Check if args.Start is beetween item.From and item.To
                    if (args.Start >= item.From && args.Start <= item.To)
                    {
                        // set background red
                        args.Attributes["class"] = "rz-slot-excluded";
                    }
                }
            }
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        if (args.Start >= PlanningSession.From && args.Start <= PlanningSession.To)
        {
            OpenAddReservationDialog(args.Start, args.End);
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Reservation> args)
    {
        OpenEditReservationDialog(args.Data);
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Reservation> args)
    {
        var color = ColorHelper.GenerateColorFromString(args.Data.PlannerUser.Email);
        args.Attributes["style"] = $"background: {color}";
    }

    async Task OnAppointmentMove(SchedulerAppointmentMoveEventArgs args)
    {

    }

    private void onShiftTypeFilterOptionChanged(int value){
        if (value == 1)
        {
            reservations = DbContext.Reservations.Include("PlannerUser").Where(r => r.PlanningSessionId == PlanningSessionId).AsQueryable();
        }
        else if (value == 2)
        {
            reservations = DbContext.Reservations
                .Include(r => r.PlannerUser)
                .Where(r => r.PlanningSessionId == PlanningSessionId && (
                    r.Type == ReservationType.SchooolReunion || 
                    r.Type == ReservationType.UnavailabilityPaid || 
                    (r.Type == ReservationType.UnavailabilityFree && r.From.Hour == 7)))
                .AsQueryable();
        }
        else if (value == 3)
        {
            reservations = DbContext.Reservations
                .Include(r => r.PlannerUser)
                .Where(r => r.PlanningSessionId == PlanningSessionId && (
                    r.Type == ReservationType.SchooolReunion ||
                    r.Type == ReservationType.UnavailabilityPaid ||
                    (r.Type == ReservationType.UnavailabilityFree && r.From.Hour == 19)))
                .AsQueryable();
        }
        else if (value == 4)
        {
            reservations = DbContext.Reservations
                .Include(r => r.PlannerUser)
                .Where(r => r.PlanningSessionId == PlanningSessionId && r.Type == ReservationType.SchooolReunion)
                .AsQueryable();
        }
        else if (value == 5)
        {
            reservations = DbContext.Reservations
                .Include(r => r.PlannerUser)
                .Where(r => r.PlanningSessionId == PlanningSessionId && r.Type == ReservationType.UnavailabilityPaid)
                .AsQueryable();
        }
        else if (value == 6)
        {
            reservations = DbContext.Reservations
                .Include(r => r.PlannerUser)
                .Where(r => r.PlanningSessionId == PlanningSessionId && r.Type == ReservationType.UnavailabilityFree)
                .AsQueryable();
        }

        this.scheduler!.Reload();
    }
}

<PageTitle>Grafik</PageTitle>

<h3>Sesja planingowa: @PlanningSession.From.ToShortDateString() - @PlanningSession.To.ToShortDateString() (@PlanningSession.Comment) </h3>

@if(!PlanningSession.IsActive)
{
    <h4>Sesja nieaktywna</h4>
    <p>W tej sesji nie można dodawać rezerwacji.</p>
}
else 
{
    <h4>Sesja aktywna</h4>
    <p>W tej sesji można dodawać rezerwacje.</p>
}

<RadzenTabs TabPosition="TabPosition.Top" RenderMode="TabRenderMode.Client">
    <Tabs>
        <RadzenTabsItem Text="Kalendarz">
            <RadzenButton Click=@(args => OpenAddReservationDialog())
                          Text="Dodaj Rezerwację"
                          Icon="add_circle"
                          Style="margin-bottom: 15px"
                          ButtonStyle="ButtonStyle.Primary" />

            <RadzenRadioButtonList 
                Name="ShiftTypeFilter" 
                @bind-Value=@shiftTypeFilterOption 
                TValue="int" 
                Orientation="Orientation.Horizontal"
                                   Change="onShiftTypeFilterOptionChanged">
                <Items>
                    <RadzenRadioButtonListItem Text="Wszystkie rezerwacje" Value="1" />
                    <RadzenRadioButtonListItem Text="Zmiany dzienne" Value="2" />
                    <RadzenRadioButtonListItem Text="Zmiany nocne" Value="3" />
                    <RadzenRadioButtonListItem Text="Zjazdy" Value="4" />
                    <RadzenRadioButtonListItem Text="Rezerwacje płatne" Value="5" />
                    <RadzenRadioButtonListItem Text="Rezerwacje bezpłatne" Value="6" />
                </Items>
            </RadzenRadioButtonList>

            <RadzenScheduler @ref=@scheduler
                             SlotRender=@OnSlotRender
                             style="height: 880px;"
                             TItem="Reservation"
                             Data=@reservations
                             StartProperty="From"
                             EndProperty="To"
                             TextProperty="CalendarDescription"
                             SelectedIndex="3"
                             SlotSelect=@OnSlotSelect
                             AppointmentSelect=@OnAppointmentSelect
                             AppointmentRender=@OnAppointmentRender
                             AppointmentMove=@OnAppointmentMove>
                <RadzenDayView Text="Dzień" StartTime=@TimeSpan.Zero EndTime=@TimeSpan.FromDays(1) TimeFormat="HH:mm" />
                <RadzenWeekView Text="Tydzień" StartTime=@TimeSpan.Zero EndTime=@TimeSpan.FromDays(1) TimeFormat="HH:mm" />
                <RadzenMonthView Text="Miesiąc" />
                <RadzenYearPlannerView 
                    MaxAppointmentsInSlot="5" 
                    Text="Rok" />
            </RadzenScheduler>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Lista Rezerwacji">
            <RadzenButton Click=@(args => OpenAddReservationDialog())
                          Text="Dodaj Rezerwację"
                          Icon="add_circle"
                          Style="margin-bottom: 15px"
                          ButtonStyle="ButtonStyle.Primary" />

            <RadzenDataGrid AllowFiltering="true"
                            AllowColumnResize="false"
                            AllowAlternatingRows="false"
                            FilterMode="FilterMode.Advanced"
                            AllowSorting="true"
                            PageSize="25"
                            AllowPaging="true"
                            PagerHorizontalAlign="HorizontalAlign.Justify"
                            ShowPagingSummary="true"
                            Data="@reservations"
                            ColumnWidth="300px"
                            LogicalFilterOperator="LogicalFilterOperator.Or"
                            SelectionMode="DataGridSelectionMode.Single"
                            @bind-Value=@selectedReservations
                            @ref=@reservationDataGrid>
                <Columns>
                    <RadzenDataGridColumn Property="@nameof(Reservation.From)"
                                          FormatString="{0:d}"
                                          Filterable="true"
                                          Title="Od"
                                          Frozen="true"
                                          Width="80px"
                                          TextAlign="TextAlign.Left" />
                    <RadzenDataGridColumn Property="@nameof(Reservation.To)"
                                          FormatString="{0:d}"
                                          Filterable="true"
                                          Title="Do"
                                          Frozen="true"
                                          Width="80px"
                                          TextAlign="TextAlign.Left" />
                    <RadzenDataGridColumn TItem="Reservation"
                                          Property="@nameof(Reservation.PlannerUser)"
                                          Filterable="true"
                                          Title="Przypisana Osoba"
                                          Frozen="true"
                                          Width="200px"
                                          TextAlign="TextAlign.Left">
                        <Template Context="reservation">
                            @if (reservation.PlannerUser != null)
                            {
                                <div style="display: flex; align-items: center;">
                                    <span>@reservation.PlannerUser.Name</span>&nbsp;
                                    <span>(@reservation.PlannerUser.Email)</span>
                                </div>
                            }
                            else
                            {
                                <span>Nie przypisano</span>
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Property="@nameof(Reservation.Type)"
                                          Filterable="true"
                                          Title="Typ"
                                          Frozen="true"
                                          Width="80px"
                                          TextAlign="TextAlign.Left" />
                    <RadzenDataGridColumn Property="@nameof(Reservation.Comment)"
                                          Filterable="true"
                                          Title="Komentarz"
                                          Frozen="true"
                                          Width="80px"
                                          TextAlign="TextAlign.Left" />
                    <RadzenDataGridColumn Context="reservation"
                                          Filterable="false"
                                          Sortable="false"
                                          TextAlign="TextAlign.Right"
                                          Width="52px">
                        <Template Context="reservation">
                            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
                                <RadzenButton Icon="edit"
                                              ButtonStyle="ButtonStyle.Light"
                                              Variant="Variant.Flat"
                                              Size="ButtonSize.Medium"
                                              Click="@(args => OpenEditReservationDialog(reservation))"
                                              @onclick:stopPropagation="true">
                                </RadzenButton>
                                <RadzenButton Icon="delete"
                                              ButtonStyle="ButtonStyle.Light"
                                              Variant="Variant.Flat"
                                              Size="ButtonSize.Medium"
                                              Click="@(args => OpenDeleteReservationDialog(reservation))"
                                              @onclick:stopPropagation="true">
                                </RadzenButton>
                            </RadzenStack>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Dni wyłączone">
            <RadzenButton Click=@(args => OpenAddExcludedTimeDialog())
                          Text="Dodaj Regułę"
                          Icon="add_circle"
                          Style="margin-bottom: 15px"
                          ButtonStyle="ButtonStyle.Primary" />

            <RadzenDataGrid AllowFiltering="false"
                            AllowColumnResize="false"
                            AllowAlternatingRows="false"
                            FilterMode="FilterMode.Advanced"
                            AllowSorting="true"
                            PageSize="25"
                            AllowPaging="true"
                            PagerHorizontalAlign="HorizontalAlign.Justify"
                            ShowPagingSummary="true"
                            Data="@excludedTimes"
                            ColumnWidth="300px"
                            LogicalFilterOperator="LogicalFilterOperator.Or"
                            SelectionMode="DataGridSelectionMode.Single"
                            @bind-Value=@selectedExcludedTimes
                            @ref=@excludedTimeDataGrid>
                <Columns>
                    <RadzenDataGridColumn Property="@nameof(ExcludedTime.From)"
                                          FormatString="{0:d}"
                                          Filterable="true"
                                          Title="Od"
                                          Frozen="true"
                                          Width="80px"
                                          TextAlign="TextAlign.Left" />
                    <RadzenDataGridColumn Property="@nameof(ExcludedTime.To)"
                                           FormatString="{0:d}"
                                           Filterable="true"
                                           Title="Do"
                                           Frozen="true"
                                           Width="80px"
                                           TextAlign="TextAlign.Left" />
                    <RadzenDataGridColumn Property="@nameof(ExcludedTime.Reason)"
                                          Filterable="true"
                                          Title="Powód"
                                          Frozen="true"
                                          Width="80px"
                                          TextAlign="TextAlign.Left" />
                    <RadzenDataGridColumn Context="excludedTime"
                                          Filterable="false"
                                          Sortable="false"
                                          TextAlign="TextAlign.Right"
                                          Width="52px">
                        <Template Context="excludedTime">
                            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
                                <RadzenButton Icon="edit"
                                              ButtonStyle="ButtonStyle.Light"
                                              Variant="Variant.Flat"
                                              Size="ButtonSize.Medium"
                                              Click="@(args => OpenEditExcludedTimeDialog(excludedTime))"
                                              @onclick:stopPropagation="true">
                                </RadzenButton>
                                <RadzenButton Icon="delete"
                                              ButtonStyle="ButtonStyle.Light"
                                              Variant="Variant.Flat"
                                              Size="ButtonSize.Medium"
                                              Click="@(args => OpenDeleteExcludedTimeDialog(excludedTime))"
                                              @onclick:stopPropagation="true">
                                </RadzenButton>
                            </RadzenStack>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Limity Dni">

        </RadzenTabsItem>

    </Tabs>
</RadzenTabs>

<style>
    .rz-slot-excluded:not(:has(.rz-slot-header)) {
        background: #ffcccb !important; /* Background for .master without .child */
    }

    .rz-slot-out-of-range {
        background: #f5f5f5 !important;
    }

    .input-wrap! > input[type=text] {
        background: #000;
    }
</style>
