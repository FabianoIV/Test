@using Grafik.Data
@using System.Security.Claims
@using Grafik.Services
@using Microsoft.EntityFrameworkCore

@inject DialogService DialogService
@inject ApplicationDbContext DbContext
@inject NotificationService NotificationService
@inject ICustomAuthService authService
@inject ICustomNotificationsService CustomNotificationsService

@code {
    [Parameter]
    public required PlanningSession PlanningSession { get; set; }

    [Parameter]
    public DateTime? PrefferedStartTime { get; set; }

    [Parameter]
    public DateTime? PrefferedEndTime { get; set; }

    private Reservation? reservation;
    private int shiftOption;

    private IEnumerable<ReservationType>? reservationTypes;
    private IEnumerable<PlannerUser>? plannerUsers;
    private IEnumerable<UserHourLimit>? userHourLimits;

    protected override async Task OnInitializedAsync()
    {
        reservation = new Reservation
            {
                PlanningSessionId = PlanningSession.Id,
                To = DateTime.Today.AddHours(23).AddMinutes(59),
            };

        if (PrefferedStartTime != null)
        {
            reservation.From = PrefferedStartTime.Value;
        }

        if (PrefferedEndTime != null)
        {
            reservation.To = PrefferedEndTime.Value.AddHours(23).AddMinutes(59);
        }

        reservationTypes = new List<ReservationType>() {
            ReservationType.SchooolReunion,
            ReservationType.UnavailabilityFree,
            ReservationType.UnavailabilityPaid
        };

        plannerUsers = DbContext.PlannerUsers.ToList();
        userHourLimits = DbContext.UserHourLimit.Where(uhl => uhl.PlanningSessionId == PlanningSession.Id).ToList();

        if (await authService.IsUserAuthenticated() && !await authService.IsAdministrator())
        {
            var userName = await authService.GetLoggedUserName();
            reservation.PlannerUser = plannerUsers.FirstOrDefault(pu => pu.Email == userName);
        }
    }

    async Task OnSubmit(Reservation model)
    {
        if (!await authService.IsUserAuthenticated())
        {
            CustomNotificationsService.SendAuthorizationMissingNotification();
            DialogService.Close(null);
            return;
        }

        var userHoursLimitVerificationResult = await VerifyUserHoursLimit(model);

        if (userHoursLimitVerificationResult == false)
        {
            CustomNotificationsService.SendErrorNotification("Przekroczony limit godzinowy dla użytkownika");
            DialogService.Close(null);
            return;
        }

        Reservation? doubledReservation = null;

        doubledReservation = model.Type switch
        {
            ReservationType.UnavailabilityPaid => DbContext.Reservations.FirstOrDefault(r =>
                r.PlanningSessionId == model.PlanningSessionId &&
                r.Type == ReservationType.UnavailabilityPaid &&
                r.From.Date == model.From.Date),
            ReservationType.UnavailabilityFree => DbContext.Reservations.FirstOrDefault(r =>
                r.PlanningSessionId == model.PlanningSessionId &&
                r.Type == ReservationType.UnavailabilityPaid &&
                r.From == model.From &&
                r.To == model.To),
            ReservationType.SchooolReunion => DbContext.Reservations.FirstOrDefault(r =>
                r.PlanningSessionId == model.PlanningSessionId &&
                r.Type == ReservationType.SchooolReunion &&
                r.From == model.From &&
                r.To == model.To),
            _ => null
        };

        if (doubledReservation != null)
        {
            CustomNotificationsService.SendReservationAlreadyExistsNotification();
            return;
        }

        var result = new Reservation()
        {
            PlannerUser = model.PlannerUser,
            PlannerUserId = model.PlannerUserId,
            PlanningSessionId = model.PlanningSessionId,
            Comment = model.Comment,
            UserId = model.UserId,
            Type = model.Type
        };

        if (model.Type == ReservationType.UnavailabilityPaid)
        {
            result.From = model.From.Date.AddHours(7);
            result.To = model.From.Date.AddHours(24);
        }
        else if (model.Type == ReservationType.UnavailabilityFree)
        {
            if (shiftOption == 1) // day shift
            {
                result.From = model.From.Date.AddHours(7);
                result.To = model.From.Date.AddHours(19);
            }
            else // night shift
            {
                result.From = model.From.Date.AddHours(19);
                result.To = model.From.Date.AddHours(24);
            }
        }
        else if (model.Type == ReservationType.SchooolReunion)
        {
            if (shiftOption == 1) // day shift
            {
                result.From = model.From.Date.AddHours(7);
                result.To = model.From.Date.AddHours(19);
            }
            else // night shift
            {
                result.From = model.From.Date.AddHours(19);
                result.To = model.From.Date.AddHours(24);
            }
        }

        try
        {
            DbContext.Add(result);
            DbContext.SaveChanges();

            CustomNotificationsService.SendReservationCreateSuccessNotification();
        }
        catch (Exception ex)
        {
            CustomNotificationsService.SendErrorNotification(ex.Message);
        }

        DialogService.Close(model);
    }

    private async Task<bool> VerifyUserHoursLimit(Reservation model)
    {
        if (model.Type == ReservationType.SchooolReunion)
        {
            return true; // No verification
        }

        var userHoursLimits = userHourLimits!.FirstOrDefault(uhl => uhl.PlannerUser.Id == model.PlannerUser!.Id);

        if (userHoursLimits == null)
        {
            return false;
        }

        // check total sums of hours in planning session
        if (model.Type == ReservationType.UnavailabilityFree)
        {
            var userReservations = DbContext.Reservations.Include("PlannerUser").Where(r =>
                r.PlannerUserId == model.PlannerUser.Id &&
                r.Type == ReservationType.UnavailabilityFree).ToList();

            userReservations.Add(model);
            var userReservationsHours = userReservations.Count() * 12;

            if (userReservationsHours > userHoursLimits.UnavailabilityFreeHoursLimit)
            {
                return false;
            }
        }
        else if (model.Type == ReservationType.UnavailabilityPaid)
        {
            var userReservations = DbContext.Reservations.Include("PlannerUser").Where(r =>
                r.PlannerUserId == model.PlannerUser.Id &&
                r.Type == ReservationType.UnavailabilityPaid).ToList();

            userReservations.Add(model);

            var userReservationsHours = userReservations.Count() * 24;
            if (userReservationsHours > userHoursLimits.UnavailabilityPaidHoursLimit)
            {
                return false;
            }
        }

        return true;
    }

    void OnCancel()
    {
        DialogService.Close(null);
    }

    private void OnReservationTypeChanged(ChangeEventArgs e)
    {
        var selectedType = (ReservationType)e.Value;
        reservation.Type = selectedType;

        // Additional logic based on the selected reservation type can be added here
    }

    private bool ValidateFromAndToDateRangeOrder()
    {
        if (reservation.From <= reservation.To)
        {
            return true;
        }

        return false;
    }

    private bool ValidateFromDateAndPlanningSessionFromDateOrder()
    {
        if (PlanningSession.From <= reservation.From)
        {
            return true;
        }

        return false;
    }

    private bool ValidateToDateAndPlanningSessionToDateOrder()
    {
        if (PlanningSession.To >= reservation.To)
        {
            return true;
        }

        return false;
    }

    private bool ValidateFromAndToDateIsOnlyInWeekend()
    {
        if (!(reservation.From.DayOfWeek == DayOfWeek.Friday ||
            reservation.From.DayOfWeek == DayOfWeek.Saturday ||
            reservation.From.DayOfWeek == DayOfWeek.Sunday))
        {
            return false;
        }

        return true;
    }

    private void SchoolReunionCalendarDateRender(DateRenderEventArgs args)
    {
        if (args.Date.DayOfWeek == DayOfWeek.Friday)
        {
            args.Attributes.Add("style", "background-color: #ff6d41; border-color: white;");
        }

        args.Disabled = args.Disabled ||
            args.Date.DayOfWeek == DayOfWeek.Monday ||
            args.Date.DayOfWeek == DayOfWeek.Tuesday ||
            args.Date.DayOfWeek == DayOfWeek.Wednesday ||
            args.Date.DayOfWeek == DayOfWeek.Thursday;
    }
}

<RadzenTemplateForm TItem="Reservation"
                    Data="@reservation"
                    Submit=@OnSubmit>
    <RadzenStack Gap="1rem">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenLabel Text="Typ rezerwacji"
                         Style="width: 6rem;" />
            <RadzenDropDown @bind-Value=@reservation.Type
                            Data=@reservationTypes
                            Style="width: 15rem;"
                            Name="DropDownBindValue" />
        </RadzenStack>

        @if (reservation.Type == ReservationType.UnavailabilityFree)
        {
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
                <RadzenLabel Text="Data"
                             Style="width: 6rem;" />
                <RadzenDatePicker @bind-Value="@reservation.From"
                                  Name="From"
                                  ShowTime="true"
                                  DateFormat="yyyy/MM/dd"
                                  Style="width: 15rem;" />
                <RadzenRequiredValidator Component="From"
                                         Text="Data od jest wymagana" />
                <RadzenCustomValidator Component="From"
                                       Validator="@ValidateFromDateAndPlanningSessionFromDateOrder"
                                       Text="Data 'Od' musi być późniejsza niż data rozpoczęcia sesji planowania" />
            </RadzenStack>


            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
                <RadzenLabel Text="Zmiana: "
                             Style="width: 6rem;" />

                <RadzenRadioButtonList @bind-Value=@shiftOption TValue="int" Orientation="Orientation.Vertical" Style="width: 15rem;">
                    <Items>
                        <RadzenRadioButtonListItem Text="dzienna" Value="1" />
                        <RadzenRadioButtonListItem Text="nocna" Value="2" />
                    </Items>
                </RadzenRadioButtonList>
            </RadzenStack>
        }
        else if (reservation.Type == ReservationType.UnavailabilityPaid)
        {
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
                <RadzenLabel Text="Data"
                             Style="width: 6rem;" />
                <RadzenDatePicker @bind-Value="@reservation.From"
                                  Name="From"
                                  ShowTime="true"
                                  DateFormat="yyyy/MM/dd"
                                  Style="width: 15rem;" />
                <RadzenRequiredValidator Component="From"
                                         Text="Data od jest wymagana" />
                <RadzenCustomValidator Component="From"
                                       Validator="@ValidateFromDateAndPlanningSessionFromDateOrder"
                                       Text="Data 'Od' musi być późniejsza niż data rozpoczęcia sesji planowania" />
            </RadzenStack>
        }
        else if (reservation.Type == ReservationType.SchooolReunion)
        {
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
                <RadzenLabel Text="Data"
                             Style="width: 6rem;" />
                <RadzenDatePicker @bind-Value="@reservation.From"
                                  Name="From"
                                  ShowTime="true"
                                  DateFormat="yyyy/MM/dd"
                                  Style="width: 15rem;" />
                <RadzenRequiredValidator Component="From"
                                         Text="Data od jest wymagana" />
                <RadzenCustomValidator Component="From"
                                       Validator="@ValidateFromDateAndPlanningSessionFromDateOrder"
                                       Text="Data 'Od' musi być późniejsza niż data rozpoczęcia sesji planowania" />
                <RadzenCustomValidator Component="From"
                                       Validator="@ValidateFromAndToDateIsOnlyInWeekend"
                                       Text="Zjazd może odbywać się tylko w weekend (piątek, sobota, niedziela)" />
            </RadzenStack>


            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
                <RadzenLabel Text="Zmiana: "
                             Style="width: 6rem;" />

                <RadzenRadioButtonList @bind-Value=@shiftOption TValue="int" Orientation="Orientation.Vertical" Style="width: 15rem;">
                    <Items>
                        <RadzenRadioButtonListItem Text="dzienna" Value="1" />
                        <RadzenRadioButtonListItem Text="nocna" Value="2" />
                    </Items>
                </RadzenRadioButtonList>
            </RadzenStack>
        }

        @if (authService.IsAdministrator().Result)
        {
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
                <RadzenLabel Text="Przypisana osoba"
                             Style="width: 6rem;" />
                <RadzenDropDown @bind-Value=@reservation.PlannerUser
                                Data=@plannerUsers
                                Style="width: 15rem;"
                                Name="DropDownPlannerUser">
                    <Template Context="user">
                        <div style="display: inline-block; align-items: center;">
                            <span style="font-weight: 500; margin-left: 5px;">@user.Name</span>
                            <span>(@user.Email)</span>
                        </div>
                    </Template>
                </RadzenDropDown>
                <RadzenRequiredValidator Component="DropDownPlannerUser"
                                         Text="Przypisana osoba jest wymagana" />
            </RadzenStack>
        }
        else
        {
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
                <RadzenLabel Text="Przypisana osoba"
                             Style="width: 6rem;" />
                <RadzenTextBox Name="PlannerUserDisabled"
                               @bind-Value=@reservation.PlannerUser!.Email
                               Style="width: 15rem;"
                               Disabled="true"/>
            </RadzenStack>
        }

        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenLabel Text="Komentarz"
                         Style="width: 6rem;" />
            <RadzenTextBox Name="Comment"
                           @bind-Value="@reservation.Comment"
                           Style="width: 15rem;" />
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
            <RadzenButton ButtonType="ButtonType.Submit" Text="Zapisz" ButtonStyle="ButtonStyle.Success" />
            <RadzenButton ButtonType="ButtonType.Button" Text="Anuluj" Click="OnCancel" />
        </RadzenStack>
    </RadzenStack>
</RadzenTemplateForm>
