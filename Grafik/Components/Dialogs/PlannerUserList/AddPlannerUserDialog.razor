@using Grafik.Data
@using Grafik.Services
@using Microsoft.AspNetCore.Identity

@inject DialogService DialogService
@inject ApplicationDbContext DbContext
@inject NotificationService NotificationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject ICustomNotificationsService CustomNotificationsService

@code {
    public PlannerUser PlannerUser { get; set; } = new PlannerUser()
    {
        Name = "",
        Email = ""
    };
    public string Password { get; set; }

    async Task OnSubmit(PlannerUser model)
    {
        var authState = AuthenticationStateProvider.GetAuthenticationStateAsync().Result;

        if (authState?.User?.Identity?.IsAuthenticated == false)
        {
            CustomNotificationsService.SendAuthorizationMissingNotification();
            DialogService.Close(null);
            return;
        }

        try
        {
            var now = DateTime.Now;
            PlannerUser.Created = now;
            PlannerUser.Updated = now;

            DbContext.PlannerUsers.Add(model);
            DbContext.SaveChanges();

            // Create user
            var user = new ApplicationUser
            {
                UserName = model.Email,
                Email = model.Email,
                EmailConfirmed = true
            };

            var result = await UserManager.CreateAsync(user, Password);

            if (!result.Succeeded)
            {
                CustomNotificationsService.SendUserCreatedErrorNotification();
                return;
            }

            CustomNotificationsService.SendUserCreatedSucessNotification();
        }
        catch (Exception)
        {
            CustomNotificationsService.SendUserCreatedErrorNotification();
        }

        DialogService.Close(model);
    }

    void OnCancel()
    {
        DialogService.Close(null);
    }
}

<RadzenTemplateForm TItem="PlannerUser"
                    Data="@PlannerUser"
                    Submit=@OnSubmit>
    <RadzenStack Gap="1rem">

        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenLabel Text="Nazwa"
                         Style="width: 6rem;" />
            <RadzenTextBox Name="Name"
                           @bind-Value="@PlannerUser.Name"
                           Style="width: 15rem;" />
            <RadzenRequiredValidator Component="Name" Text="Nazwa jest wymagana" />
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenLabel Text="Email"
                         Style="width: 6rem;" />
            <RadzenTextBox Name="Email"
                           @bind-Value="@PlannerUser.Email"
                           Style="width: 15rem;" />
            <RadzenRequiredValidator Component="Email" Text="Email jest wymagany" />
            <RadzenEmailValidator Component="Email" Text="Nipoprawny adres email" />
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenLabel Text="Hasło"
                         Style="width: 6rem;" />
            <RadzenTextBox Name="Password"
                           @bind-Value="Password"
                           Style="width: 15rem;" />
            <RadzenRequiredValidator Component="Password" Text="Hasło jest wymagane" />
            <RadzenCustomValidator Text="Hasło musi zawierać co najmniej jedną dużą literę" Component="Password" IsValid="@(() => Password.Any(char.IsUpper))" />
            <RadzenCustomValidator Text="Hasło musi zawierać co najmniej jedną małą literę" Component="Password" IsValid="@(() => Password.Any(char.IsLower))" />
            <RadzenCustomValidator Text="Hasło musi zawierać co najmniej jedną cyfrę" Component="Password" IsValid="@(() => Password.Any(char.IsDigit))" />
            <RadzenCustomValidator Text="Hasło musi zawierać co najmniej jeden znak specjalny" Component="Password" IsValid="@(() => Password.Any(char.IsPunctuation))" />
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
            <RadzenButton ButtonType="ButtonType.Submit" Text="Zapisz" ButtonStyle="ButtonStyle.Success" />
            <RadzenButton ButtonType="ButtonType.Button" Text="Anuluj" Click="OnCancel" />
        </RadzenStack>
    </RadzenStack>
</RadzenTemplateForm>
