@using Grafik.Data
@using System.Security.Claims
@using Grafik.Services

@inject DialogService DialogService
@inject ApplicationDbContext DbContext
@inject NotificationService NotificationService
@inject ICustomAuthService authService
@inject ICustomNotificationsService CustomNotificationsService

@code {
    [Parameter]
    public required Reservation Reservation { get; set; }

    async Task OnSubmit(Reservation model)
    {
        if (!await authService.IsUserAuthenticated())
        {
            CustomNotificationsService.SendAuthorizationMissingNotification();
            DialogService.Close(null);
            return;
        }

        if (!await authService.IsAdministrator())
        {
            if (model.PlannerUser.Email != (await authService.GetLoggedUserName()))
            {
                CustomNotificationsService.SendNotReservationOwnerNotification();
                return;
            }
        }

        try
        {
            DbContext.Reservations.Remove(Reservation);
            DbContext.SaveChanges();

            CustomNotificationsService.SendReservationDeleteSuccessNotification();
        }
        catch (Exception)
        {
            CustomNotificationsService.SendReservationDeleteErrorNotification();
        }

        DialogService.Close(model);
    }

    void OnCancel()
    {
        DialogService.Close(null);
    }
}

<RadzenTemplateForm TItem="Reservation" Data="@Reservation" Submit=@OnSubmit>
    <RadzenStack Gap="1rem">
        Czy na pewno chcesz usunąć rezerwację?

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Danger" Text="Usuń" />
            <RadzenButton ButtonType="ButtonType.Button" Text="Anuluj" Click="OnCancel" />
        </RadzenStack>
    </RadzenStack>
</RadzenTemplateForm>