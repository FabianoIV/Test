@using Grafik.Data
@using Grafik.Services

@inject DialogService DialogService
@inject ApplicationDbContext DbContext
@inject NotificationService NotificationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ICustomNotificationsService CustomNotificationsService

@code {
    [Parameter]
    public PlanningSession? PlanningSession { get; set; }

    void OnSubmit(PlanningSession model)
    {
        var authState = AuthenticationStateProvider.GetAuthenticationStateAsync().Result;

        if (authState?.User?.Identity?.IsAuthenticated == false)
        {
            CustomNotificationsService.SendAuthorizationMissingNotification();
            DialogService.Close(null);
            return;
        }

        try
        {
            DbContext.PlanningSessions.Remove(model);
            DbContext.SaveChanges();

            CustomNotificationsService.SendPlanningSessionDeleteSuccessNotification();
        }
        catch (Exception)
        {
            CustomNotificationsService.SendPlanningSessionDeleteErrorNotification();
        }

        DialogService.Close(model);
    }

    void OnCancel()
    {
        DialogService.Close(null);
    }
}


<RadzenTemplateForm TItem="PlanningSession" Data="@PlanningSession" Submit=@OnSubmit>
    <RadzenStack Gap="1rem">
        Czy na pewno chcesz usunąć sesję planowania?

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Danger" Text="Usuń" />
            <RadzenButton ButtonType="ButtonType.Button" Text="Anuluj" Click="OnCancel" />
        </RadzenStack>
    </RadzenStack>
</RadzenTemplateForm>