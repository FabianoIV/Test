@using Grafik.Data
@using Grafik.Services
@using Microsoft.AspNetCore.Identity

@inject DialogService DialogService
@inject ApplicationDbContext DbContext
@inject NotificationService NotificationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject ICustomNotificationsService CustomNotificationsService
@inject ICustomAuthService authService

@code {
    [Parameter]
    public PlannerUser? PlannerUser { get; set; }

    public bool IsPlannerUserAdministrator { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsPlannerUserAdministrator = await authService.IsAdministrator(PlannerUser.Email);
    }

    async Task OnSubmit(PlannerUser model)
    {
        var authState = AuthenticationStateProvider.GetAuthenticationStateAsync().Result;

        if (authState?.User?.Identity?.IsAuthenticated == false)
        {
            CustomNotificationsService.SendAuthorizationMissingNotification();
            DialogService.Close(null);
            return;
        }

        try
        {
            var user = await UserManager.FindByEmailAsync(PlannerUser!.Email);
            if (user != null)
            {
                user.Email = model.Email;
                user.UserName = model.Email;

                await UserManager.UpdateAsync(user);
            }

            PlannerUser.Updated = DateTime.Now;

            DbContext.PlannerUsers.Update(model);
            DbContext.SaveChanges();

            CustomNotificationsService.SendUserUpdateSuccessNotification();
        }
        catch (Exception)
        {
            CustomNotificationsService.SendUserUpdateErrorNotification();
        }

        DialogService.Close(model);
    }

    async Task OnClickAddAdministratorRoleToUser()
    {
        if (!await authService.IsAdministrator())
        {
            CustomNotificationsService.SendAuthorizationMissingNotification();
            return;
        }

        var user = await UserManager.FindByEmailAsync(PlannerUser.Email);

        if (user == null)
        {
            CustomNotificationsService.SendErrorNotification("Nie znaleziono użytkownika");
        }

        var result = await authService.AddAdministratorRoleToUser(user);

        if (!result)
        {
            CustomNotificationsService.SendErrorNotification("Nie udało się dodać roli administratora");
        }

        IsPlannerUserAdministrator = true;
        StateHasChanged();

        CustomNotificationsService.SendAddedAdministratorRoleNotification();
    }

    async Task OnClickRemoveAdministratorRoleFromUser()
    {
        if (!await authService.IsAdministrator())
        {
            CustomNotificationsService.SendAuthorizationMissingNotification();
            return;
        }

        var user = await UserManager.FindByEmailAsync(PlannerUser.Email);

        if (user == null)
        {
            CustomNotificationsService.SendErrorNotification("Nie znaleziono użytkownika");
        }

        var result = await authService.RemoveAdministratorRoleFromUser(user);

        if (!result)
        {
            CustomNotificationsService.SendErrorNotification("Nie udało się usunąć roli administratora");
        }

        IsPlannerUserAdministrator = false;
        StateHasChanged();

        CustomNotificationsService.SendRemoveAdministratorRoleNotification();
    }

    void OnCancel()
    {
        DialogService.Close(null);
    }
}

<RadzenTemplateForm TItem="PlannerUser" Data="@PlannerUser" Submit=@OnSubmit>
    <RadzenStack Gap="1rem">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenLabel Text="Nazwa"
                         Style="width: 6rem;" />
            <RadzenTextBox Name="Name"
                           @bind-Value="@PlannerUser.Name"
                           ShowTime="true"
                           Style="width: 12rem;" />
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenLabel Text="Email"
                         Style="width: 6rem;" />
            <RadzenTextBox Name="Email"
                           @bind-Value="@PlannerUser.Email"
                           ShowTime="true"
                           Style="width: 12rem;" />
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenLabel Text="Kolor karty - zjazdy"
                         Style="width: 6rem;" />
            <RadzenColorPicker @bind-Value=PlannerUser.SchoolReuninionCardColor 
                               ShowHSV=true 
                               ShowRGBA=true 
                               ShowColors=true
                               ShowButton=false />
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenLabel Text="Kolor karty - niedostępność płatna"
                         Style="width: 6rem;" />
            <RadzenColorPicker @bind-Value=PlannerUser.UnavailabilityPaidCardColor
                               ShowHSV=true
                               ShowRGBA=true
                               ShowColors=true
                               ShowButton=false />
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenLabel Text="Kolor karty - niedostępnośc bezpłatna (zmiana dzienna)"
                         Style="width: 6rem;" />
            <RadzenColorPicker @bind-Value=PlannerUser.UnavailabilityFreeDayShiftCardColor
                               ShowHSV=true
                               ShowRGBA=true
                               ShowColors=true
                               ShowButton=false />
        </RadzenStack>

        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.Wrap">
            <RadzenLabel Text="Kolor karty - niedostępnośc bezpłatna (zmiana nocna)"
                         Style="width: 6rem;" />
            <RadzenColorPicker @bind-Value=PlannerUser.UnavailabilityFreeNightShiftCardColor
                               ShowHSV=true
                               ShowRGBA=true
                               ShowColors=true
                               ShowButton=false />
        </RadzenStack>


        @if (authService.IsAdministrator().Result && !IsPlannerUserAdministrator)
        {
            <RadzenButton Text="Nadaj prawa administarcyjne"
                          Click="() => OnClickAddAdministratorRoleToUser()" />
        }

        @if (authService.IsAdministrator().Result && IsPlannerUserAdministrator)
        {
            <RadzenButton Text="Usuń prawa administarcyjne"
                          ButtonStyle="ButtonStyle.Danger"
                          Click="() => OnClickRemoveAdministratorRoleFromUser()" />
        }

        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Text="Zapisz" />
            <RadzenButton ButtonType="ButtonType.Button" Text="Anuluj" Click="OnCancel" />
        </RadzenStack>
    </RadzenStack>
</RadzenTemplateForm>